
#include <iostream>
#include <bits/stdc++.h>

using namespace std;
class Node {
public:
    int data;
    Node* next;

    Node(int data1, Node* next1) {
        data = data1;
        next = next1;
    }
    Node(int data1) {
        data = data1;
        next = nullptr;
    }
};

Node* convertArrToLinkedList(vector<int>& arr){
    // Create a dummy node to serve
    // as the head of the linked list
    Node* dummyNode = new Node(-1);
    Node* temp = dummyNode;

    // Iterate through the vector and
    // create nodes with vector elements
    for(int i = 0; i < arr.size(); i++){
        temp->next = new Node(arr[i]); 
        temp = temp->next; 
    }
    return dummyNode->next; 
}


Node* mergeKLists(vector<Node*>& listArray){
    
    vector<int> arr;

    // Iterate through the listArray
    // containing all linked lists
    for(int i = 0; i < listArray.size(); i++){
        // Initialize a temporary pointer to
        // the head of the current linked list
        Node* temp = listArray[i];

        // Traverse through the
        // current linked list
        while(temp != NULL)
            arr.push_back(temp->data);
            temp = temp->next;
        }
    }
    sort(arr.begin(), arr.end());

    // Convert the sorted vector back to
    // a linked list and return its head
    return convertArrToLinkedList(arr);
}



// Function to print the linked list
void printLinkedList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " "; 
        temp = temp->next; 
    }
    cout << endl;
}

int main() {
    // Create linked lists
    Node* head1 = new Node(2, new Node(4, new Node(6)));
    Node* head2 = new Node(1, new Node(5));
    Node* head3 = new Node(1, new Node(1, new Node(3, new Node(7))));
    Node* head4 = new Node(8);

    // Populate the lists vector
    vector<Node*> lists = {head1, head2, head3, head4};
    
    cout << "Original Linked Lists:" << endl;
    for (int i = 0; i < lists.size(); ++i) {
        cout << "List " << i + 1 << ": ";
        printLinkedList(lists[i]);
    }

    // Merge the linked lists
    Node* mergedList = mergeKLists(lists);
    
    // Print the merged linked list
    cout << "Merged Linked List: ";
    printLinkedList(mergedList);

    return 0;
}


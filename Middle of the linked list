//Given head of a linked list, the task is to find the middle. For example, the middle of 1-> 2->3->4->5 is 3. If there are two middle nodes (even count), return the second middle. For example, middle of 1->2->3->4->5->6 is 4.
class Solution{
    public:
    /* Should return data of middle node. If linked list is empty, then  -1*/

    int getMiddle(Node *head)
    {
        // Your code here
        if(head==0){
            return -1;
        }


        int c=0;
        Node *last=head;

        while(last){
            last=last->next;
            c++;
        }

        c=(c/2)+1;

        last=head;
        while(c>1){
            last=last->next;
            c--;    
        }
        return last->data;
    }
};
